apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'

//BEGIN CONFIG ANDROID LIB

android {
    compileSdkVersion(28)

    defaultConfig {
        minSdkVersion(21)
        targetSdkVersion(28)
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    packagingOptions {
        // Ktor prevents the build otherwise
        exclude 'META-INF/*.kotlin_module'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:1.1.0"
}

//END CONFIG ANDROID LIB

//BEGIN KOTLIN MULTIPLAFORM
kotlin {
    targets {

        // Android Target
        android()

        // Select iOS target for real device or emulator.
        final def iOSIsRealDevice = System.getenv('SDK_NAME')?.startsWith("iphoneos")
        final def iOSTarget = iOSIsRealDevice ? presets.iosArm64 : presets.iosX64

        // iOS target.
        fromPreset(iOSTarget, 'ios') {
            binaries { framework('common') }
        }
    }
}
//END KOTLIN MULTIPLAFORM

//BEGIN DEPENDENCIES
dependencies {
    def kotlin_stdlib = "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //libs for common
    commonMainImplementation kotlin_stdlib

    //libs for android
    androidMainImplementation kotlin_stdlib

    //libs for iOS
    iosMainImplementation kotlin_stdlib
}
//END DEPENDENCIES

// Task to generate iOS framework for xcode projects.
task packForXCode(type: Sync) {

    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("common", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

// Run packForXCode when building.
tasks.build.dependsOn packForXCode